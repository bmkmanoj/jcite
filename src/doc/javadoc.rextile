
h1. Using JCite With JavaDoc


JCite can be used within java doc comments using the @{@.jcite ...}@ tag. While you could also just embed the "standard JCite markup":java.htm in your doc comments, using the JavaDoc tag has a number of benefits:

	* No need for a second, separate processing pass for the HTML files generated by JavaDoc.

	* No need for specifying the package name of the class you're citing from if it's in the same package as the class you're citing into.


_Note:_ You have to "set up JavaDoc":#Setup before you can use the <code>{@.jcite ...}</code> tag.

<%= toc 2, 3 %>


h2. The JCite Tag

Using JCite in JavaDoc is very similar to "using it in standalone documents":java.htm. You simply write <code>{@.jcite ...}</code> instead of the standard tag. Here's an example:

	[jc:ch.arrenbrecht.jcite.examples.Adder:---- fullPath]

which cites a snippet from the class @AdderTest@:

	[jc:ch.arrenbrecht.jcite.examples.AdderTest:---- fullPathTarget]

The output "looks like this":-getAddend (@getAddend@ method).

[-getAddend]javadoc/ch/arrenbrecht/jcite/examples/Adder.html#getAddend()


h3. Inline Tag

The <code>{@.jcite ...}</code> tag is a JavaDoc _inline tag_. This means you can embed it within sentences. In the output, the cited source is still inserted as a <code>pre</code> tag, meaning it is properly shown in a paragraph of its own. This is so you can use it everywhere, including method parameter and exception documentation.

It seems, though, that a method comment like

<pre><code
>/**
 * Does something. {@.jcite -- example}
 */
</code></pre>

will cause the example code to be included in the class's method overview. JavaDoc does not properly recognize the end of the first sentence. To fix this, you have to use something like:

<pre><code
>/**
 * Does something. Example: {@.jcite -- example}
 */
</code></pre>


h3. Citing From The Same Package

When citing from source classes that are in the same package as the one you are documenting, you can omit the package name in the <code>{@.jcite ...}</code> tag:

	[jc:ch.arrenbrecht.jcite.examples.Adder:---- noPath]

This relies on the fact that the @AdderTest@, while in a separate source folder, is still in the same package as the class under test, @Adder@. (So, yes, we could have omitted the package name in the first example too.) If the cited class is in another package, we do have to give the package, though (as shown above, too).

The output "looks like this":javadoc/ch/arrenbrecht/jcite/examples/Adder.html.


h3. Citing From The Same Class

When citing from the very class you are documenting (for example, parts of the implementation of a method), you can omit the source class in the <code>{@.jcite ...}</code> tag too. This is shown in the example below in the documentation of the parameters (which also shows that you can insert citations into parameter documentation):

	[jc:ch.arrenbrecht.jcite.examples.Adder:---- noClass]

The "standard tag documentation":java.htm explains the use of highlighting and other features of JCite's citation markup.

The output "looks like this":-add.

[-add]javadoc/ch/arrenbrecht/jcite/examples/Adder.html#add(int,%20int)


h2. <a name="Setup">Setting Up JavaDoc</a>

Before you can use the <code>{@.jcite ...}</code> tag, you have to configure JavaDoc so it knows where to find JCite. In addition to your own startup options, you have to provide the following:

<pre><code
>javadoc
  -tagletpath ...(all jars from lib/ and build/)...
  -taglet ch.arrenbrecht.jcite.JCiteTaglet
  ...
</code></pre>

where for @-tagletpath@ you have to specify all the jars found in JCite's @lib/@ and @build/@ folders, separated by @;@ (Windows) or @:@ (Unix).

This tells JavaDoc to load the JCite taglet (a JavaDoc plugin), which supports the <code>{@.jcite ...}</code> tag.


h3. Source Path

In this configuration, you can only cite from the sources that you are running JavaDoc on, i.e., those found in the path given in the standard JavaDoc option @sourcePath@:

<pre><code
>javadoc
  ...
  -sourcepath <pathToSourceBeingDocumented>
  ...
</code></pre>

Typically you want to cite source code from special unit tests (which I call _example tests_) that showcase your API and are annotated with comments indicating what to cite. These usually are not on the JavaDoc @sourcePath@. To tell JCite where to find them, you have to specify an additional option to JavaDoc (which, in fact, sets a system property for the Java VM - I found no other way to pass in information):

<pre><code
>javadoc
  ...
  -J-Djcitesourcepath=<pathToAddlSourceCitedFrom>
  ...
</code></pre>


h3. Verbosity

To make the JCite taglet report citations, use:

<pre><code
>javadoc
  ...
  -J-Djciteverbose=true
  ...
</code></pre>


h3. Style Sheet

Finally, since JCite emits HTML that "relies on CSS for formatting":styling.htm, you should specify a stylesheet for JavaDoc's output. If you already have one, integrate the JCite-specific instructions into it. Otherwise you may want to use JCite's default stylesheet. In any case, you need to tell JavaDoc to use it:

<pre><code
>javadoc
  ...
  -stylesheetfile <stylesheet.css>
  ...
</code></pre>


h3. Complete Example

Here's a complete example which I use to produce the test documentation for JCite's JavaDoc integration:

<pre><code
>javadoc
  -tagletpath ...(all jars from lib/ and build/)...
  -taglet ch.arrenbrecht.jcite.JCiteTaglet
  -public
  -sourcepath src/examples
  -J-Djcitesourcepath=src/test
  -J-Djciteverbose=true
  -d temp
  -stylesheetfile src/test/data/style.css
  -overview src/examples/overview.html
  ch.arrenbrecht.jcite.examples
</code></pre>
